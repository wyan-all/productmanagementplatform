/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.9.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
   // id 'java-library'
    // Apply the web plugin 
    id 'war'
    id 'eclipse-wtp'
}

configurations {
   moreLibs
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    implementation 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'
    implementation group: 'mysql', name: 'mysql-connector-java', version: '5.1.39'
    implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.2.9.Final'
    testImplementation group: 'junit', name: 'junit', version: '3.8.1'
    implementation group: 'com.sun.jersey', name: 'jersey-core', version: '1.19.4'
    implementation group: 'com.sun.jersey', name: 'jersey-server', version: '1.19.4'
    implementation group: 'com.sun.jersey', name: 'jersey-servlet', version: '1.19.4'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-web', version: '2.10.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.11.6'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.11'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.8.11'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-cbor', version: '2.8.11'
    
    implementation group: 'org.codehaus.jettison', name: 'jettison', version: '1.4.1'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
        
    implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.3'
//   implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    
    compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    
    //implementation group: 'org.apache.logging.log4j', name: 'log4j-Slf4j-impl', version: '2.14.1'
  //安全漏洞  implementation group: 'com.alibaba', name: 'fastjson', version: '1.2.78'
    // implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
   // compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.22'
}

war {
    //archiveVersion = '1.0.0'
    from 'webapp' // adds a file-set to the root of the archive
    //webInf { from 'webapp/WEB-INF' } // adds a file-set to the WEB-INF dir.
    //webXml = file('webapp/WEB-INF/web.xml') // copies a file to WEB-INF/web.xml
    classpath fileTree('webapp/WEB-INF/lib') // adds a file-set to the WEB-INF/lib dir.
    classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
}

eclipse {

  //if you want parts of paths in dataing file(s) to be replaced by variables (files):
  //pathVariables 'GRADLE_HOME': file('/best/software/gradle'), 'TOMCAT_HOME': file('../tomcat')
  
  
  wtp {
    
    // config eclipse .settings/org.eclipse.wst.common.component
    component {
      //you can configure the context path:
      //contextPath = 'web'

      //you can configure the deployName:
      //deployName = 'killerApp'

      //you can alter the wb-resource elements.
      //non-existing source dirs won't be added to the component file.
      //sourceDirs += file('someExtraFolder')

      // dependencies to mark as deployable with lib folder deploy path
      //libConfigurations += [ configurations.someInterestingConfiguration ]

      // dependencies to mark as deployable with root folder deploy path
      //rootConfigurations += [ configurations.someInterestingConfiguration ]

      // dependencies to exclude from wtp deployment
      //minusConfigurations << configurations.anotherConfiguration

      //you can add a wb-resource elements; mandatory keys: 'sourcePath', 'deployPath':
      //if sourcePath points to non-existing folder it will *not* be added.
      resource sourcePath: 'src/main/resources', deployPath: '/WEB-INF/classes'
      resource sourcePath: 'src/main/java', deployPath: '/WEB-INF/classes'
      resource sourcePath: 'src/test/java', deployPath: '/WEB-INF/classes'
      resource sourcePath: 'src/test/resources', deployPath: '/WEB-INF/classes'
      resource sourcePath: 'webapp', deployPath: '/', tag: 'defaultRootSource'

      //you can add a wb-property elements; mandatory keys: 'name', 'value':
      property name: 'java-output-path', value: '/web/bin/default'
    }
    
    // config eclipse 
    facet {
      
      //facet name: 'jst.web', type: org.gradle.plugins.ide.eclipse.model.Facet.FacetType.fixed
      //facet name: 'wst.jsdt.web', type: org.gradle.plugins.ide.eclipse.model.Facet.FacetType.fixed
      //facet name: 'wst.java', type: org.gradle.plugins.ide.eclipse.model.Facet.FacetType.fixed
      //facet name: 'jst.web', version: '3.1'
      //facet name: 'jst.java', version: '1.8'
      //facet name: 'wst.jsdt.web', version: '1.0'

      file {
        //if you want to mess with the dataing XML in whatever way you fancy
        withXml {
          //def node = it.asNode()
          //node.appendNode('xml', 'is what I love')
             provider -> 
             provider.asNode().installed.find { it.@facet == 'jst.web' }.@version = '3.1'
             provider.asNode().installed.find { it.@facet == 'jst.java' }.@version = '1.8'
        }

        //beforeMerged and whenMerged closures are the highest voodoo for the tricky edge cases.
        //the type passed to the closures is WtpFacet

        //closure executed after wtp facet file content is loaded from existing file
        //but before gradle build information is merged
        beforeMerged { wtpFacet ->
          //tinker with WtpFacet here
          //org.gradle.plugins.ide.eclipse.model.WtpFacet
          //wtpFacet.facets.removeAll { entry -> entry.name == 'jst.web' }
        }

        //closure executed after wtp facet file content is loaded from existing file
        //and after gradle build information is merged
        whenMerged { wtpFacet ->
          //you can tinker with the WtpFacet here
          //org.gradle.plugins.ide.eclipse.model.WtpFacet
          //wtpFacet.facets.removeAll { entry -> entry.name == 'jst.web' }
        }
      }
    }
    
  }
}
